Revised WebApi Controllers to add addition error information
------------------------------------------------------------
Note: the Get requests are fine, it is just in the Actions we need to add code
-------------
Doctors Controller
---

        // PUT: api/Doctors/5
        [HttpPut("{id}")]
        public async Task<IActionResult> PutDoctor([FromRoute] int id, [FromBody] Doctor doctor)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != doctor.ID)
            {
                return BadRequest();
            }

            _context.Entry(doctor).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!DoctorExists(id))
                {
                    return BadRequest("Concurrency Error: Doctor has been Removed.");
                }
                else
                {
                    return BadRequest("Concurrency Error: Doctor has been updated by another user.  Cancel and try editing the record again.");
                }
            }

            return NoContent();
        }

        // POST: api/Doctors
        [HttpPost]
        public async Task<IActionResult> PostDoctor([FromBody] Doctor doctor)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            _context.Doctors.Add(doctor);
            try
            {
                await _context.SaveChangesAsync();
                return CreatedAtAction("GetDoctor", new { id = doctor.ID }, doctor);
            }
            catch (Exception)
            {
                return BadRequest("Unable to save changes to the database. Try again, and if the problem persists see your system administrator.");
            }
            
        }

        // DELETE: api/Doctors/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteDoctor([FromRoute] int id)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var doctor = await _context.Doctors.FindAsync(id);
            if (doctor == null)
            {
                return BadRequest("Delete Error: Doctor has already been deleted.");
            }
            try
            {
                _context.Doctors.Remove(doctor);
                await _context.SaveChangesAsync();
                return Ok(doctor);
            }
            catch (DbUpdateException dex)
            {
                if (dex.InnerException.InnerException.Message.Contains("FX_"))
                {
                    return BadRequest("Unable to Delete: You cannot delete a Doctor that has Patients.");
                }
                else
                {
                    return BadRequest("Unable to save changes to the database. Try again, and if the problem persists see your system administrator.");
                }
            }
            catch (System.Exception)
            {
                return BadRequest("Something went wrong. Try again, and if the problem persists see your system administrator.");
            }
        }
---
Patients Controller
---
        // PUT: api/Patients/5
        [HttpPut("{id}")]
        public async Task<IActionResult> PutPatient([FromRoute] int id, [FromBody] Patient patient)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != patient.ID)
            {
                return BadRequest();
            }

            _context.Entry(patient).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
                return Ok(patient);
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!PatientExists(id))
                {
                    ModelState.AddModelError("", "Concurrency Error: Patient has been Removed.");
                    return BadRequest(ModelState);
                }
                else
                {
                    ModelState.AddModelError("", "Concurrency Error: Patient has been updated by another user.  Cancel and try editing the record again.");
                    return BadRequest(ModelState);
                }
            }
            catch (DbUpdateException dex)
            {
                if (dex.InnerException.Message.Contains("IX_"))
                {
                    ModelState.AddModelError("", "Unable to save changes: Duplicate OHIP number.");
                    return BadRequest(ModelState);
                }
                else
                {
                    ModelState.AddModelError("", "Unable to save changes to the database. Try again, and if the problem persists see your system administrator.");
                    return BadRequest(ModelState);
                }
            }

        }

        // POST: api/Patients
        [HttpPost]
        public async Task<IActionResult> PostPatient([FromBody] Patient patient)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            _context.Patients.Add(patient);
            try
            {
                await _context.SaveChangesAsync();
                return CreatedAtAction("GetPatient", new { id = patient.ID }, patient);
            }
            catch (DbUpdateException dex)
            {
                if (dex.InnerException.Message.Contains("IX_"))
                {
                    ModelState.AddModelError("", "Unable to save: Duplicate OHIP number.");
                    return BadRequest(ModelState);
                }
                else
                {
                    ModelState.AddModelError("", "Unable to save changes to the database. Try again, and if the problem persists see your system administrator.");
                    return BadRequest(ModelState);
                }
            }
        }

         // DELETE: api/Patients/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeletePatient([FromRoute] int id)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var patient = await _context.Patients.FindAsync(id);
            
            if (patient == null)
            {
                ModelState.AddModelError("", "Delete Error: Patient has already been Removed.");
                
            }else
            {
                try
                {
                    _context.Patients.Remove(patient);
                    await _context.SaveChangesAsync();
                    return Ok(patient);
                }
                catch (DbUpdateException)
                {
                    ModelState.AddModelError("", "Delete Error: Unable to delete Patient.");
                }
            }
            return BadRequest(ModelState);
        }
-------------------
---

